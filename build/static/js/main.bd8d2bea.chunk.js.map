{"version":3,"sources":["components/BreedFilter.js","components/DisplayBreeds.js","components/UserBreed.js","hooks/useHttp.js","components/Home.js","components/EachBreed.js","App.js","index.js"],"names":["BreedFilter","breedNames","selected","onChangeFilter","value","onChange","event","target","map","breed","DisplayBreeds","allBreeds","selectedValue","index","className","to","Math","random","toString","UserBreed","dogBreeds","useState","filteredBreed","setFilteredBreed","selectedBreed","useHttp","isLoading","setIsLoading","error","setError","sendRequest","useCallback","requestConfig","applyData","a","fetch","url","method","response","ok","Error","json","responseData","message","Home","setDogBreeds","fetchDogsHandler","useEffect","taskObj","transformedDogBreeds","Array","from","Object","keys","id","length","EachBreed","data","setData","check","setCheck","useParams","fetchPictures","pictures","values","display","dog","src","alt","style","marginRight","onClick","prevCheck","App","Fragment","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"+OA6BeA,EA3BK,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,WAAYC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,eAYzC,OACA,8BACI,gCACA,oDACA,yBAAQC,MAAOF,EAAUG,SAPC,SAACC,GAC3BH,EAAeG,EAAMC,OAAOH,QAM5B,UACI,wBAAQ,cAAY,gBAAgBA,MAAM,MAA1C,wBACCH,EAAWO,KAAI,SAACC,GAAD,OAChB,wBAAQ,cAAY,gBAA4BL,MAAOK,EAAvD,SAA+DA,GAAtBA,e,OCqBtCC,EAtCO,SAAC,GAAmC,IAsBpDC,EAtBmBV,EAAgC,EAAhCA,WAAYW,EAAoB,EAApBA,cAmCnC,OAXED,EADoB,QAAlBC,EACUX,EAAWO,KAAI,SAACC,EAAOI,GAAR,OACzB,yBAAqBC,UAAU,WAA/B,SACE,cAAC,IAAD,CAAqCA,UAAU,QAAQC,GAAI,aAAaN,EAAxE,SAAgFA,GAArEO,KAAKC,SAASC,aADbL,MAKd,yBAASC,UAAU,WAAnB,SACG,cAAC,IAAD,CAAMA,UAAU,QAAQC,GAAI,aAAaH,EAAzC,SAAyDA,MAIzD,6BAAKD,KCFCQ,EAhCG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAQnB,EAA0CC,mBAAS,OAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAOA,OACE,gCAGE,cAAC,EAAD,CACErB,SAAUoB,EACVnB,eAVsB,SAACqB,GAC3BD,EAAiBC,IAUbvB,WAAYmB,IAKd,cAAC,EAAD,CAAenB,WAAYmB,EAAWR,cAAeU,Q,yBCO5CG,EAjCC,WACd,MAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0BN,mBAAS,MAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAwBA,MAAO,CACLH,YACAE,QACAE,YAxBkBC,sBAAW,uCAAC,WAAOC,EAAeC,GAAtB,iBAAAC,EAAA,6DAC9BP,GAAa,GACbE,EAAS,MAFqB,kBAILM,MAAMH,EAAcI,IAAK,CAE9CC,OAAQ,QANkB,WAItBC,EAJsB,QASdC,GATc,sBAUpB,IAAIC,MAAM,yBAVU,wBAaDF,EAASG,OAbR,QAatBC,EAbsB,OAc5BT,EAAUS,GAdkB,kDAgB5Bb,EAAS,KAAMc,SAhBa,QAkB9BhB,GAAa,GAlBiB,0DAAD,wDAmB5B,MCgBUiB,MA1Cf,WAOE,MAAkCvB,mBAAS,IAA3C,mBAAOD,EAAP,KAAkByB,EAAlB,KAGA,EAA4DpB,IAApDC,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,MAAoBkB,EAAvC,EAA0BhB,YAgB1B,OAfAiB,qBAAU,WAURD,EACE,CAAEV,IAAK,wCATc,SAACY,GACtB,IAAMC,EAAuBC,MAAMC,KAAKC,OAAOC,KAAKL,EAAQL,UAC5DE,EAAaI,QAUd,CAACH,IAEF,mCAIE,0BAASQ,GAAG,QAAZ,WACI5B,GAAaN,EAAUmC,OAAS,GAChC,cAAC,EAAD,CAAW,eAAa,OAAOnC,UAAWA,KAE1CM,GAAaE,GAAS,4BAAIA,IAC3BF,GAAa,mBAAG,eAAa,UAAhB,8B,OC+BP8B,EAlEG,WAUhB,MAAwBnC,mBAAS,IAAjC,mBAAOoC,EAAP,KAAaC,EAAb,KACA,EAA0BrC,oBAAS,GAAnC,mBAAOsC,EAAP,KAAcC,EAAd,KACQN,EAAOO,cAAPP,GAER,EAAyD7B,IAAjDC,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,MAAoBkC,EAAvC,EAA0BhC,YAG1BiB,qBAAU,WAMRe,EACE,CAAE1B,IAAK,6BAA+BkB,EAAK,qBANtB,SAACN,GACtB,IAAMe,EAAWX,OAAOY,OAAOhB,EAAQL,SACvCe,EAAQK,QAQT,CAACD,EAAeR,EAAIK,IAIvB,IAAIM,EAAU,GACM,IAAhBR,EAAKF,SACPU,EAAUR,EAAKjD,KAAI,SAAC0D,EAAKrD,GAAN,OACjB,qBAAKsD,IAAKD,EAAKE,IAAKd,GAAStC,KAAKC,SAASC,gBAU/C,OACE,oCACE,+CAAkBoC,EAAlB,yBACA,cAAC,IAAD,CACExC,UAAU,QACVuD,MAAO,CAAEC,YAAa,QAEtBvD,GAAI,IAJN,SAMG,iBAEH,wBAAQwD,QAfU,WACpBX,GAAS,SAACY,GAAD,OAAgBA,MAcvB,2BACA,sBAAK1D,UAAU,YAAf,WACIY,GAAauC,GACbvC,GAAaE,GAAS,4BAAIA,IAC3BF,GAAa,kD,MC7CP+C,MAbf,WAKE,OACE,eAAC,IAAMC,SAAP,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,cAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,gBAAgBC,UAAWrB,QCRnDsB,IAASC,OACL,cAAC,IAAD,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.bd8d2bea.chunk.js","sourcesContent":["import React from 'react';\n\nconst BreedFilter = ({ breedNames, selected, onChangeFilter }) => {\n     /*\n     Goal of BreedFilter component:\n        Find out which dogBreed name the user selected. \n\n          After when a user chooses from the option, \n          we will pass that data from child component to parent component by \n          forwarding the data in onChangeFilter function.\n     */\n    const dropdownChangeHandler = (event) => {\n        onChangeFilter(event.target.value);\n    };\n    return (\n    <div>\n        <div>\n        <label>Filter by breed</label>\n        <select value={selected} onChange={dropdownChangeHandler}>\n            <option data-testid=\"select-option\" value='all'>All breeds</option>\n            {breedNames.map((breed) => (\n            <option data-testid=\"select-option\" key={breed} value={breed}>{breed}</option>\n            ))}\n        </select>\n        </div>\n    </div>\n    );\n};\n\nexport default BreedFilter;\n","import React from \"react\";\n\nimport { Link } from 'react-router-dom';\n\nconst DisplayBreeds = ({ breedNames, selectedValue }) => {\n  /*\n  Goal of DisplayBreeds component:\n    1) Display the breed names on Home page.\n    2) If user clicks on a dog breed, it will open a seperate page\n\n    We can display breed names by following the pseudocode:\n    We have two conditons. \n        -  First, the user can see the all 95 Dog Breeds\n        -  Second, the user can see only one Dog Breed\n    \n    If the user has selected to see all 95 Dog Breeds, \n        we will iterate through the list and call <Link />\n    \n    else,  \n        we will call <Link />, only once. \n\n    We can open a seperate page by following the pseudocode.\n    In the <Link /> component, If the user clicks on one of the dog breed names \n    on the home page, we will render EachBreed component  \n  */\n\n  let allBreeds;\n  if (selectedValue === \"all\") {\n    allBreeds = breedNames.map((breed, index) => (\n      <section key={index} className=\"section2\">\n        <Link key={Math.random().toString()} className=\"link2\" to={\"/pictures/\"+breed}>{breed}</Link>\n      </section>\n    ));\n  } else allBreeds = \n      <section className=\"section2\">\n         <Link className=\"link2\" to={\"/pictures/\"+selectedValue}>{selectedValue}</Link>\n      </section>\n\n  // Rendering all the dog breed names here.\n  return <ul>{allBreeds}</ul>;\n};\n\nexport default DisplayBreeds;\n","import React, { useState } from \"react\";\n\nimport BreedFilter from \"./BreedFilter\";\nimport DisplayBreeds from \"./DisplayBreeds\";\n\nconst UserBreed = ({ dogBreeds }) => {\n  /*  \n    Goal of UserBreed Component:\n      1) Find out which dogBreed name the user filtered on the home page. \n      2) Pass that filtered dogBreed value to DisplayBreeds component\n  */\n\n  // On default, if the user has not selected any dog breed, it will show all dog breeds\n  const [filteredBreed, setFilteredBreed] = useState(\"all\");\n\n  // If the user has selected a dog breed, it will change our state\n  const filterChangeHandler = (selectedBreed) => {\n    setFilteredBreed(selectedBreed);\n  };\n\n  return (\n    <div>\n      {/* In BreedFilter component, we are passing all the 95 Dog Breed array\n      and then receives (only one or all) filtered dog breed that the user chosen.*/}\n      <BreedFilter\n        selected={filteredBreed}\n        onChangeFilter={filterChangeHandler}\n        breedNames={dogBreeds}\n      />\n      {/* In DisplayBreeds component, after when the user selected the dog breed, \n      we will pass the filtered dog breed to DisplayBreeds component\n      so that it will display the filtered dog breed on the home page*/}\n      <DisplayBreeds breedNames={dogBreeds} selectedValue={filteredBreed} />\n    </div>\n  );\n};\n\nexport default UserBreed;\n","import { useState, useCallback } from \"react\";\r\n\r\n/*\r\n    We can use custom hook and reuse this component \r\n    everytime when we call API \r\n*/\r\nconst useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // sendRequest takes two arguments: config URL and a function transforms data\r\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        // Since we are using only GET method, I didn't define head and body\r\n        method: \"GET\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong!\");\r\n      }\r\n\r\n      const responseData = await response.json();\r\n      applyData(responseData);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  return {\r\n    isLoading,\r\n    error,\r\n    sendRequest,\r\n  };\r\n};\r\n\r\nexport default useHttp;","import React, { useState, useEffect } from \"react\";\nimport UserBreed from \"./UserBreed\";\nimport useHttp from \"../hooks/useHttp\";\n\nfunction Home() {\n  /*\n    Goal of Home component:\n      1) Fetch all 95 dog breeds\n  */\n\n  //dogBreeds restores an array of all dog breeds.\n  const [dogBreeds, setDogBreeds] = useState([]);\n\n  // Custom hook will return the following three variables.\n  const { isLoading, error, sendRequest: fetchDogsHandler } = useHttp();\n  useEffect(() => {\n    // We will pass transformTasks in fetchDogsHandler\n    const transformTasks = (taskObj) => {\n      const transformedDogBreeds = Array.from(Object.keys(taskObj.message));\n      setDogBreeds(transformedDogBreeds);\n    };\n\n    // Since we already have sendRequest as fetchDogsHandler, we have\n    // to pass two parameters: url and transformTasks. Now, the page\n    // will rerender only if fetchDogsHandler changes.\n    fetchDogsHandler(\n      { url: \"https://dog.ceo/api/breeds/list/all\" },\n      transformTasks\n    );\n  }, [fetchDogsHandler]);\n  return (\n    <>\n      {/* It renders based on 3 states. If displays if there's any error while fetching the data */}\n      {/* After the successful API call, we are passing the total 95 dog breed array to UserBreed component where \n      our user will filter the data  */}\n      <section id=\"names\">\n        {!isLoading && dogBreeds.length > 0 && (\n          <UserBreed data-test-id=\"data\" dogBreeds={dogBreeds} />\n        )}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p data-test-id=\"loading\">Loading...</p>}\n      </section>\n    </>\n  );\n}\n\nexport default Home;","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport useHttp from \"../hooks/useHttp\";\n\nconst EachBreed = () => {\n  /*\n  Goal of EachBreed component:\n      1) After when the user clicks to see a dog breed, \n         we will fetch three random pictures of that breed.\n      2) Create two UI. \n          --One UI, a user can get random 3 more pictures\n          --Another UI, a user can click a button to go back \n            to the home page\n*/\n  const [data, setData] = useState([]);\n  const [check, setCheck] = useState(false);\n  const { id } = useParams();\n\n  const { isLoading, error, sendRequest: fetchPictures } = useHttp();\n\n  // Just like Home page, it also uses useEffect and automatically renders it.\n  useEffect(() => {\n    const transformTasks = (taskObj) => {\n      const pictures = Object.values(taskObj.message);\n      setData(pictures);\n    };\n\n    fetchPictures(\n      { url: \"https://dog.ceo/api/breed/\" + id + \"/images/random/3\" },\n      transformTasks\n    );\n    // Only rerenders if one of the following three changes.\n  }, [fetchPictures, id, check]);\n\n  // Only renders the images, if the state has 3 images in an array.\n  // Otherwise, return an empty string.\n  let display = \"\";\n  if (data.length !== 0) {\n    display = data.map((dog, index) => (\n      <img src={dog} alt={id} key={Math.random().toString()} />\n    ));\n  }\n\n  // It will change the state therefore it causes to rerender and\n  // shows more cute dog pictures.\n  const buttonHandler = () => {\n    setCheck((prevCheck) => !prevCheck);\n  };\n\n  return (\n    <section>\n      <h3>Random three {id} breed dog pictures</h3>\n      <Link\n        className=\"link2\"\n        style={{ marginRight: \"20px\" }}\n        // Setting the route to the Home page\n        to={\"/\"}\n      >\n        {\"Back to Home\"}\n      </Link>\n      <button onClick={buttonHandler}>More Dog Pics</button>\n      <div className=\"container\">\n        {!isLoading && display}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p>Loading...</p>}\n      </div>\n    </section>\n  );\n};\n\nexport default EachBreed;\n","import React from \"react\";\nimport Home from \"./components/Home\";\nimport EachBreed from \"./components/EachBreed\";\nimport { Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nfunction App() {\n  /*\n      Since we want to open seperate page to see dog pictures. I used Router to pass parameters.\n      Initally, it will render at Home.js\n  */\n  return (\n    <React.Fragment>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/pictures/:id\" component={EachBreed} />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n    );"],"sourceRoot":""}